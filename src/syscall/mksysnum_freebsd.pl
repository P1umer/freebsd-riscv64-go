#!/usr/bin/env perl
# Copyright 2009 The Go Authors. All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.
#
# Generate system call table for FreeBSD from master list
# (for example, /usr/src/sys/kern/syscalls.master).
use strict;
my $command = "mksysnum_freebsd.pl " . join(' ', @ARGV);
print <<EOF;
// $command
// Code generated by the command above; DO NOT EDIT.
package syscall
const (
EOF

my $std = 0;
my $_num;
my $_proto;
my $_name;

while(<>){
    if(/^([0-9]+)\s+\S+\s+STD(|\S+)?\s+{$/){
	$std = 1;
	$_proto = "";
	$_name = "";
	$_num = $1;
    }
    if(/^([0-9]+)\s+\S+\s+COMPAT11(|\S+)?\s+{$/){
	if ($1 == 14 || # mknod
	    $1 == 188 || # stat
	    $1 == 190 # lstat
	    ) {
	    $std = 1;
	    $_proto = "";
	    $_name = "";
	    $_num = $1;
	}
    }    
    elsif ($std && /^\s+(\S+\s+\*?(\w+)\(.*)$/){
	$_proto = $1;
	$_name = "SYS_$2";
    }
    elsif ($std && /^\s+}.*$/){
	$std = 0;
	my $num = $_num;
	my $proto = $_proto;
	my $name = $_name;
	$name =~ y/a-z/A-Z/;

	# There are multiple entries for enosys and nosys, so comment them out.
	if($name =~ /^SYS_E?NOSYS$/){
	    $name = "// $name";
	}
	if($name eq 'SYS_SYS_EXIT'){
	    $name = 'SYS_EXIT';
	}
	# if($name =~ /^SYS_CAP_+/ || $name =~ /^SYS___CAP_+/){
	#     next
	# }

	print "	$name = $num;  // $proto\n";

	# We keep Capsicum syscall numbers for FreeBSD
	# 9-STABLE here because we are not sure whether they
	# are mature and stable.
	# if($num == 513){
	#     print " SYS_CAP_NEW = 514 // { int cap_new(int fd, uint64_t rights); }\n";
	#     print " SYS__CAP_RIGHTS_GET = 515 // { int cap_getrights(int fd, \\\n";
	#     print " SYS_CAP_ENTER = 516 // { int cap_enter(void); }\n";
	#     print " SYS_CAP_GETMODE = 517 // { int cap_getmode(u_int *modep); }\n";
	# }
    }
    elsif ($std && /^\s+(.+)$/){
	$_proto = $_proto . $1;
    }
}

print <<EOF;
)
EOF