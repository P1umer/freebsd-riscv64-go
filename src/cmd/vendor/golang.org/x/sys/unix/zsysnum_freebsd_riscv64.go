// mksysnum_freebsd.pl
// Code generated by the command above; DO NOT EDIT.

package unix

const (
	// SYS_NOSYS = 0;  // int nosys(void);
	SYS_EXIT                   = 1   // void sys_exit(int rval);
	SYS_FORK                   = 2   // int fork(void);
	SYS_READ                   = 3   // ssize_t read(int fd,_Out_writes_bytes_(nbyte) void *buf,size_t nbyte);
	SYS_WRITE                  = 4   // ssize_t write(int fd,_In_reads_bytes_(nbyte) const void *buf,size_t nbyte);
	SYS_OPEN                   = 5   // int open(_In_z_ const char *path,int flags,mode_t mode);
	SYS_CLOSE                  = 6   // int close(int fd);
	SYS_WAIT4                  = 7   // int wait4(int pid,_Out_opt_ int *status,int options,_Out_opt_ _Contains_long_timet_ struct rusage *rusage);
	SYS_LINK                   = 9   // int link(_In_z_ const char *path,_In_z_ const char *to);
	SYS_UNLINK                 = 10  // int unlink(_In_z_ const char *path);
	SYS_CHDIR                  = 12  // int chdir(_In_z_ const char *path);
	SYS_FCHDIR                 = 13  // int fchdir(int fd);
	SYS_MKNOD                  = 14  // int mknod(_In_z_ const char *path,int mode,uint32_t dev);
	SYS_CHMOD                  = 15  // int chmod(_In_z_ const char *path,mode_t mode);
	SYS_CHOWN                  = 16  // int chown(_In_z_ const char *path,int uid,int gid);
	SYS_BREAK                  = 17  // void *break(_In_ char *nsize);
	SYS_GETPID                 = 20  // pid_t getpid(void);
	SYS_MOUNT                  = 21  // int mount(_In_z_ const char *type,_In_z_ const char *path,int flags,_In_opt_ void *data);
	SYS_UNMOUNT                = 22  // int unmount(_In_z_ const char *path,int flags);
	SYS_SETUID                 = 23  // int setuid(uid_t uid);
	SYS_GETUID                 = 24  // uid_t getuid(void);
	SYS_GETEUID                = 25  // uid_t geteuid(void);
	SYS_PTRACE                 = 26  // int ptrace(int req,pid_t pid,_Inout_opt_ char *addr,int data);
	SYS_RECVMSG                = 27  // ssize_t recvmsg(int s,_Inout_ _Contains_ptr_ struct msghdr *msg,int flags);
	SYS_SENDMSG                = 28  // ssize_t sendmsg(int s,_In_ _Contains_ptr_ const struct msghdr *msg,int flags);
	SYS_RECVFROM               = 29  // ssize_t recvfrom(int s,_Out_writes_bytes_(len) void *buf,size_t len,int flags,_Out_writes_bytes_opt_(*fromlenaddr) struct sockaddr *from,_Inout_opt_ __socklen_t *fromlenaddr);
	SYS_ACCEPT                 = 30  // int accept(int s,_Out_writes_bytes_opt_(*anamelen) struct sockaddr *name,_Inout_opt_ __socklen_t *anamelen);
	SYS_GETPEERNAME            = 31  // int getpeername(int fdes,_Out_writes_bytes_(*alen) struct sockaddr *asa,_Inout_opt_ __socklen_t *alen);
	SYS_GETSOCKNAME            = 32  // int getsockname(int fdes,_Out_writes_bytes_(*alen) struct sockaddr *asa,_Inout_ __socklen_t *alen);
	SYS_ACCESS                 = 33  // int access(_In_z_ const char *path,int amode);
	SYS_CHFLAGS                = 34  // int chflags(_In_z_ const char *path,u_long flags);
	SYS_FCHFLAGS               = 35  // int fchflags(int fd,u_long flags);
	SYS_SYNC                   = 36  // int sync(void);
	SYS_KILL                   = 37  // int kill(int pid,int signum);
	SYS_GETPPID                = 39  // pid_t getppid(void);
	SYS_DUP                    = 41  // int dup(u_int fd);
	SYS_GETEGID                = 43  // gid_t getegid(void);
	SYS_PROFIL                 = 44  // int profil(_Out_writes_bytes_(size) char *samples,size_t size,size_t offset,u_int scale);
	SYS_KTRACE                 = 45  // int ktrace(_In_z_ const char *fname,int ops,int facs,int pid);
	SYS_GETGID                 = 47  // gid_t getgid(void);
	SYS_GETLOGIN               = 49  // int getlogin(_Out_writes_z_(namelen) char *namebuf,u_int namelen);
	SYS_SETLOGIN               = 50  // int setlogin(_In_z_ const char *namebuf);
	SYS_ACCT                   = 51  // int acct(_In_z_ const char *path);
	SYS_SIGALTSTACK            = 53  // int sigaltstack(_In_opt_ _Contains_long_ptr_ const struct sigaltstack *ss,_Out_opt_ _Contains_long_ptr_ struct sigaltstack *oss);
	SYS_IOCTL                  = 54  // int ioctl(int fd,u_long com,_Inout_opt_ char *data);
	SYS_REBOOT                 = 55  // int reboot(int opt);
	SYS_REVOKE                 = 56  // int revoke(_In_z_ const char *path);
	SYS_SYMLINK                = 57  // int symlink(_In_z_ const char *path,_In_z_ const char *link);
	SYS_READLINK               = 58  // ssize_t readlink(_In_z_ const char *path,_Out_writes_z_(count) char *buf,size_t count);
	SYS_EXECVE                 = 59  // int execve(_In_z_ const char *fname,_In_z_ char **argv,_In_z_ char **envv);
	SYS_UMASK                  = 60  // mode_t umask(mode_t newmask);
	SYS_CHROOT                 = 61  // int chroot(_In_z_ const char *path);
	SYS_MSYNC                  = 65  // int msync(_In_ void *addr,size_t len,int flags);
	SYS_VFORK                  = 66  // int vfork(void);
	SYS_SBRK                   = 69  // int sbrk(int incr);
	SYS_SSTK                   = 70  // int sstk(int incr);
	SYS_MUNMAP                 = 73  // int munmap(_In_ void *addr,size_t len);
	SYS_MPROTECT               = 74  // int mprotect(_In_ const void *addr,size_t len,int prot);
	SYS_MADVISE                = 75  // int madvise(_In_ void *addr,size_t len,int behav);
	SYS_MINCORE                = 78  // int mincore(_In_ const void *addr,size_t len,_Out_writes_bytes_(len/PAGE_SIZE) char *vec);
	SYS_GETGROUPS              = 79  // int getgroups(u_int gidsetsize,_Out_writes_opt_(gidsetsize) gid_t *gidset);
	SYS_SETGROUPS              = 80  // int setgroups(u_int gidsetsize,_In_reads_(gidsetsize) const gid_t *gidset);
	SYS_GETPGRP                = 81  // int getpgrp(void);
	SYS_SETPGID                = 82  // int setpgid(int pid,int pgid);
	SYS_SETITIMER              = 83  // int setitimer(int which,_In_ _Contains_timet_ const struct itimerval *itv,_Out_opt_ _Contains_timet_ struct itimerval *oitv);
	SYS_SWAPON                 = 85  // int swapon(_In_z_ const char *name);
	SYS_GETITIMER              = 86  // int getitimer(int which,_Out_ _Contains_timet_ struct itimerval *itv);
	SYS_GETDTABLESIZE          = 89  // int getdtablesize(void);
	SYS_DUP2                   = 90  // int dup2(u_int from,u_int to);
	SYS_FCNTL                  = 92  // int fcntl(int fd,int cmd,intptr_t arg);
	SYS_SELECT                 = 93  // int select(int nd,_Inout_opt_ fd_set *in,_Inout_opt_ fd_set *ou,_Inout_opt_ fd_set *ex,_In_opt_ _Contains_long_timet_ struct timeval *tv);
	SYS_FSYNC                  = 95  // int fsync(int fd);
	SYS_SETPRIORITY            = 96  // int setpriority(int which,int who,int prio);
	SYS_SOCKET                 = 97  // int socket(int domain,int type,int protocol);
	SYS_CONNECT                = 98  // int connect(int s,_In_reads_bytes_(namelen) const struct sockaddr *name,__socklen_t namelen);
	SYS_GETPRIORITY            = 100 // int getpriority(int which,int who);
	SYS_BIND                   = 104 // int bind(int s,_In_reads_bytes_(namelen) const struct sockaddr *name,__socklen_t namelen);
	SYS_SETSOCKOPT             = 105 // int setsockopt(int s,int level,int name,_In_reads_bytes_opt_(valsize) const void *val,__socklen_t valsize);
	SYS_LISTEN                 = 106 // int listen(int s,int backlog);
	SYS_GETTIMEOFDAY           = 116 // int gettimeofday(_Out_ _Contains_long_timet_ struct timeval *tp,_Out_opt_ struct timezone *tzp);
	SYS_GETRUSAGE              = 117 // int getrusage(int who,_Out_ _Contains_long_ struct rusage *rusage);
	SYS_GETSOCKOPT             = 118 // int getsockopt(int s,int level,int name,_Out_writes_bytes_opt_(*avalsize) void *val,_Inout_ __socklen_t *avalsize);
	SYS_READV                  = 120 // int readv(int fd,_Inout_updates_(iovcnt) _Contains_long_ptr_ struct iovec *iovp,u_int iovcnt);
	SYS_WRITEV                 = 121 // int writev(int fd,_In_reads_opt_(iovcnt) _Contains_long_ptr_ struct iovec *iovp,u_int iovcnt);
	SYS_SETTIMEOFDAY           = 122 // int settimeofday(_In_ _Contains_long_timet_ const struct timeval *tv,_In_opt_ const struct timezone *tzp);
	SYS_FCHOWN                 = 123 // int fchown(int fd,int uid,int gid);
	SYS_FCHMOD                 = 124 // int fchmod(int fd,mode_t mode);
	SYS_SETREUID               = 126 // int setreuid(int ruid,int euid);
	SYS_SETREGID               = 127 // int setregid(int rgid,int egid);
	SYS_RENAME                 = 128 // int rename(_In_z_ const char *from,_In_z_ const char *to);
	SYS_FLOCK                  = 131 // int flock(int fd,int how);
	SYS_MKFIFO                 = 132 // int mkfifo(_In_z_ const char *path,mode_t mode);
	SYS_SENDTO                 = 133 // ssize_t sendto(int s,_In_reads_bytes_(len) const void *buf,size_t len,int flags,_In_reads_bytes_opt_(tolen) const struct sockaddr *to,__socklen_t tolen);
	SYS_SHUTDOWN               = 134 // int shutdown(int s,int how);
	SYS_SOCKETPAIR             = 135 // int socketpair(int domain,int type,int protocol,_Out_writes_(2) int *rsv);
	SYS_MKDIR                  = 136 // int mkdir(_In_z_ const char *path,mode_t mode);
	SYS_RMDIR                  = 137 // int rmdir(_In_z_ const char *path);
	SYS_UTIMES                 = 138 // int utimes(_In_z_ const char *path,_In_ _Contains_long_timet_ const struct timeval *tptr);
	SYS_ADJTIME                = 140 // int adjtime(_In_ _Contains_long_timet_ const struct timeval *delta,_Out_opt_ _Contains_long_timet_ struct timeval *olddelta);
	SYS_SETSID                 = 147 // int setsid(void);
	SYS_QUOTACTL               = 148 // int quotactl(_In_z_ const char *path,int cmd,int uid,_In_ void *arg);
	SYS_LGETFH                 = 160 // int lgetfh(_In_z_ const char *fname,_Out_ struct fhandle *fhp);
	SYS_GETFH                  = 161 // int getfh(_In_z_ const char *fname,_Out_ struct fhandle *fhp);
	SYS_SYSARCH                = 165 // int sysarch(int op,_In_z_ char *parms);
	SYS_RTPRIO                 = 166 // int rtprio(int function,pid_t pid,_Inout_ struct rtprio *rtp);
	SYS_SETFIB                 = 175 // int setfib(int fibnum);
	SYS_NTP_ADJTIME            = 176 // int ntp_adjtime(_Inout_ _Contains_long_ struct timex *tp);
	SYS_SETGID                 = 181 // int setgid(gid_t gid);
	SYS_SETEGID                = 182 // int setegid(gid_t egid);
	SYS_SETEUID                = 183 // int seteuid(uid_t euid);
	SYS_STAT                   = 188 // int stat(_In_z_ const char *path,_Out_ _Contains_timet_ struct freebsd11_stat *ub);
	SYS_LSTAT                  = 190 // int lstat(_In_z_ const char *path,_Out_ _Contains_timet_ struct freebsd11_stat *ub);
	SYS_PATHCONF               = 191 // int pathconf(_In_z_ const char *path,int name);
	SYS_FPATHCONF              = 192 // int fpathconf(int fd,int name);
	SYS_GETRLIMIT              = 194 // int getrlimit(u_int which,_Out_ struct rlimit *rlp);
	SYS_SETRLIMIT              = 195 // int setrlimit(u_int which,_In_ struct rlimit *rlp);
	SYS___SYSCTL               = 202 // int __sysctl(_In_reads_(namelen) int *name,u_int namelen,_Out_writes_bytes_opt_(*oldlenp) void *old,_Inout_opt_ size_t *oldlenp,_In_reads_bytes_opt_(newlen) const void *new,size_t newlen);
	SYS_MLOCK                  = 203 // int mlock(_In_ const void *addr,size_t len);
	SYS_MUNLOCK                = 204 // int munlock(_In_ const void *addr,size_t len);
	SYS_UNDELETE               = 205 // int undelete(_In_z_ const char *path);
	SYS_FUTIMES                = 206 // int futimes(int fd,_In_reads_(2) _Contains_long_timet_ const struct timeval *tptr);
	SYS_GETPGID                = 207 // int getpgid(pid_t pid);
	SYS_POLL                   = 209 // int poll(_Inout_updates_(nfds) struct pollfd *fds,u_int nfds,int timeout);
	SYS_CLOCK_GETTIME          = 232 // int clock_gettime(clockid_t clock_id,_Out_ _Contains_long_timet_ struct timespec *tp);
	SYS_CLOCK_SETTIME          = 233 // int clock_settime(clockid_t clock_id,_In_ _Contains_long_timet_ const struct timespec *tp);
	SYS_CLOCK_GETRES           = 234 // int clock_getres(clockid_t clock_id,_Out_ _Contains_long_timet_ struct timespec *tp);
	SYS_KTIMER_CREATE          = 235 // int ktimer_create(clockid_t clock_id,_In_ _Contains_long_ptr_ struct sigevent *evp,_Out_ int *timerid);
	SYS_KTIMER_DELETE          = 236 // int ktimer_delete(int timerid);
	SYS_KTIMER_SETTIME         = 237 // int ktimer_settime(int timerid,int flags,_In_ _Contains_long_timet_ const struct itimerspec *value,_Out_opt_ _Contains_long_timet_ struct itimerspec *ovalue);
	SYS_KTIMER_GETTIME         = 238 // int ktimer_gettime(int timerid,_Out_ _Contains_long_timet_ struct itimerspec *value);
	SYS_KTIMER_GETOVERRUN      = 239 // int ktimer_getoverrun(int timerid);
	SYS_NANOSLEEP              = 240 // int nanosleep(_In_ _Contains_long_timet_ const struct timespec *rqtp,_Out_opt_ _Contains_long_timet_ struct timespec *rmtp);
	SYS_FFCLOCK_GETCOUNTER     = 241 // int ffclock_getcounter(_Out_ ffcounter *ffcount);
	SYS_FFCLOCK_SETESTIMATE    = 242 // int ffclock_setestimate(_In_ _Contains_timet_ struct ffclock_estimate *cest);
	SYS_FFCLOCK_GETESTIMATE    = 243 // int ffclock_getestimate(_Out_ _Contains_timet_ struct ffclock_estimate *cest);
	SYS_CLOCK_NANOSLEEP        = 244 // int clock_nanosleep(clockid_t clock_id,int flags,_In_ _Contains_long_timet_ const struct timespec *rqtp,_Out_opt_ _Contains_long_timet_ struct timespec *rmtp);
	SYS_CLOCK_GETCPUCLOCKID2   = 247 // int clock_getcpuclockid2(id_t id,int which,_Out_ clockid_t *clock_id);
	SYS_NTP_GETTIME            = 248 // int ntp_gettime(_Out_ _Contains_long_timet_ struct ntptimeval *ntvp);
	SYS_MINHERIT               = 250 // int minherit(_In_ void *addr,size_t len,int inherit);
	SYS_RFORK                  = 251 // int rfork(int flags);
	SYS_ISSETUGID              = 253 // int issetugid(void);
	SYS_LCHOWN                 = 254 // int lchown(_In_z_ const char *path,int uid,int gid);
	SYS_AIO_READ               = 255 // int aio_read(_Inout_ _Contains_long_ptr_ struct aiocb *aiocbp);
	SYS_AIO_WRITE              = 256 // int aio_write(_Inout_ _Contains_long_ptr_ struct aiocb *aiocbp);
	SYS_LIO_LISTIO             = 257 // int lio_listio(int mode,_Inout_updates_(nent) _Contains_long_ptr_ struct aiocb * const *acb_list,int nent,_In_opt_ _Contains_long_ptr_ struct sigevent *sig);
	SYS_KBOUNCE                = 258 // int kbounce(_In_reads_bytes_(len) const void *src,_Out_writes_bytes_(len) void *dst,size_t len,int flags);
	SYS_FLAG_CAPTURED          = 259 // int flag_captured(_In_z_ const char *message,uint32_t key);
	SYS_LCHMOD                 = 274 // int lchmod(_In_z_ const char *path,mode_t mode);
	SYS_LUTIMES                = 276 // int lutimes(_In_z_ const char *path,_In_ _Contains_long_timet_ const struct timeval *tptr);
	SYS_PREADV                 = 289 // ssize_t preadv(int fd,_In_reads_(iovcnt) _Contains_long_ptr_ struct iovec *iovp,u_int iovcnt,off_t offset);
	SYS_PWRITEV                = 290 // ssize_t pwritev(int fd,_In_reads_(iovcnt) _Contains_long_ptr_ struct iovec *iovp,u_int iovcnt,off_t offset);
	SYS_FHOPEN                 = 298 // int fhopen(_In_ const struct fhandle *u_fhp,int flags);
	SYS_MODNEXT                = 300 // int modnext(int modid);
	SYS_MODSTAT                = 301 // int modstat(int modid,_Out_ _Contains_long_ struct module_stat *stat);
	SYS_MODFNEXT               = 302 // int modfnext(int modid);
	SYS_MODFIND                = 303 // int modfind(_In_z_ const char *name);
	SYS_KLDLOAD                = 304 // int kldload(_In_z_ const char *file);
	SYS_KLDUNLOAD              = 305 // int kldunload(int fileid);
	SYS_KLDFIND                = 306 // int kldfind(_In_z_ const char *file);
	SYS_KLDNEXT                = 307 // int kldnext(int fileid);
	SYS_KLDSTAT                = 308 // int kldstat(int fileid,_Out_ _Contains_long_ptr_ struct kld_file_stat *stat);
	SYS_KLDFIRSTMOD            = 309 // int kldfirstmod(int fileid);
	SYS_GETSID                 = 310 // int getsid(pid_t pid);
	SYS_SETRESUID              = 311 // int setresuid(uid_t ruid,uid_t euid,uid_t suid);
	SYS_SETRESGID              = 312 // int setresgid(gid_t rgid,gid_t egid,gid_t sgid);
	SYS_AIO_RETURN             = 314 // ssize_t aio_return(_Inout_ _Contains_long_ptr_ struct aiocb *aiocbp);
	SYS_AIO_SUSPEND            = 315 // int aio_suspend(_Inout_updates_(nent) _Contains_long_ptr_ struct aiocb * const *aiocbp,int nent,_In_opt_ _Contains_long_timet_ const struct timespec *timeout);
	SYS_AIO_CANCEL             = 316 // int aio_cancel(int fd,_In_opt_ _Contains_long_ptr_ struct aiocb *aiocbp);
	SYS_AIO_ERROR              = 317 // int aio_error(_In_ _Contains_long_ptr_ struct aiocb *aiocbp);
	SYS_YIELD                  = 321 // int yield(void);
	SYS_MLOCKALL               = 324 // int mlockall(int how);
	SYS_MUNLOCKALL             = 325 // int munlockall(void);
	SYS___GETCWD               = 326 // int __getcwd(_Out_writes_z_(buflen) char *buf,size_t buflen);
	SYS_SCHED_SETPARAM         = 327 // int sched_setparam(pid_t pid,_In_ const struct sched_param *param);
	SYS_SCHED_GETPARAM         = 328 // int sched_getparam(pid_t pid,_Out_ struct sched_param *param);
	SYS_SCHED_SETSCHEDULER     = 329 // int sched_setscheduler(pid_t pid,int policy,_In_ const struct sched_param *param);
	SYS_SCHED_GETSCHEDULER     = 330 // int sched_getscheduler(pid_t pid);
	SYS_SCHED_YIELD            = 331 // int sched_yield(void);
	SYS_SCHED_GET_PRIORITY_MAX = 332 // int sched_get_priority_max(int policy);
	SYS_SCHED_GET_PRIORITY_MIN = 333 // int sched_get_priority_min(int policy);
	SYS_SCHED_RR_GET_INTERVAL  = 334 // int sched_rr_get_interval(pid_t pid,_Out_ _Contains_long_timet_ struct timespec *interval);
	SYS_UTRACE                 = 335 // int utrace(_In_reads_bytes_(len) const void *addr,size_t len);
	SYS_KLDSYM                 = 337 // int kldsym(int fileid,int cmd,_In_ _Contains_long_ptr_ void *data);
	SYS_JAIL                   = 338 // int jail(_In_ _Contains_ptr_ struct jail *jailp);
	SYS_SIGPROCMASK            = 340 // int sigprocmask(int how,_In_opt_ const sigset_t *set,_Out_opt_ sigset_t *oset);
	SYS_SIGSUSPEND             = 341 // int sigsuspend(_In_ const sigset_t *sigmask);
	SYS_SIGPENDING             = 343 // int sigpending(_In_ sigset_t *set);
	SYS_SIGTIMEDWAIT           = 345 // int sigtimedwait(_In_ const sigset_t *set,_Out_opt_ _Contains_long_ptr_ struct siginfo *info,_In_opt_ _Contains_long_timet_ const struct timespec *timeout);
	SYS_SIGWAITINFO            = 346 // int sigwaitinfo(_In_ const sigset_t *set,_Out_opt_ _Contains_long_ptr_ struct siginfo *info);
	SYS___ACL_GET_FILE         = 347 // int __acl_get_file(_In_z_ const char *path,acl_type_t type,_Out_ struct acl *aclp);
	SYS___ACL_SET_FILE         = 348 // int __acl_set_file(_In_z_ const char *path,acl_type_t type,_In_ struct acl *aclp);
	SYS___ACL_GET_FD           = 349 // int __acl_get_fd(int filedes,acl_type_t type,_Out_ struct acl *aclp);
	SYS___ACL_SET_FD           = 350 // int __acl_set_fd(int filedes,acl_type_t type,_In_ struct acl *aclp);
	SYS___ACL_DELETE_FILE      = 351 // int __acl_delete_file(_In_z_ const char *path,acl_type_t type);
	SYS___ACL_DELETE_FD        = 352 // int __acl_delete_fd(int filedes,acl_type_t type);
	SYS___ACL_ACLCHECK_FILE    = 353 // int __acl_aclcheck_file(_In_z_ const char *path,acl_type_t type,_In_ struct acl *aclp);
	SYS___ACL_ACLCHECK_FD      = 354 // int __acl_aclcheck_fd(int filedes,acl_type_t type,_In_ struct acl *aclp);
	SYS_EXTATTRCTL             = 355 // int extattrctl(_In_z_ const char *path,int cmd,_In_z_opt_ const char *filename,int attrnamespace,_In_z_ const char *attrname);
	SYS_EXTATTR_SET_FILE       = 356 // ssize_t extattr_set_file(_In_z_ const char *path,int attrnamespace,_In_z_ const char *attrname,_In_reads_bytes_(nbytes) void *data,size_t nbytes);
	SYS_EXTATTR_GET_FILE       = 357 // ssize_t extattr_get_file(_In_z_ const char *path,int attrnamespace,_In_z_ const char *attrname,_Out_writes_bytes_(nbytes) void *data,size_t nbytes);
	SYS_EXTATTR_DELETE_FILE    = 358 // int extattr_delete_file(_In_z_ const char *path,int attrnamespace,_In_z_ const char *attrname);
	SYS_AIO_WAITCOMPLETE       = 359 // ssize_t aio_waitcomplete(_Outptr_result_maybenull_ _Contains_long_ptr_ struct aiocb **aiocbp,_In_opt_ _Contains_long_timet_ struct timespec *timeout);
	SYS_GETRESUID              = 360 // int getresuid(_Out_opt_ uid_t *ruid,_Out_opt_ uid_t *euid,_Out_opt_ uid_t *suid);
	SYS_GETRESGID              = 361 // int getresgid(_Out_opt_ gid_t *rgid,_Out_opt_ gid_t *egid,_Out_opt_ gid_t *sgid);
	SYS_KQUEUE                 = 362 // int kqueue(void);
	SYS_EXTATTR_SET_FD         = 371 // ssize_t extattr_set_fd(int fd,int attrnamespace,_In_z_ const char *attrname,_In_reads_bytes_(nbytes) void *data,size_t nbytes);
	SYS_EXTATTR_GET_FD         = 372 // ssize_t extattr_get_fd(int fd,int attrnamespace,_In_z_ const char *attrname,_Out_writes_bytes_(nbytes) void *data,size_t nbytes);
	SYS_EXTATTR_DELETE_FD      = 373 // int extattr_delete_fd(int fd,int attrnamespace,_In_z_ const char *attrname);
	SYS___SETUGID              = 374 // int __setugid(int flag);
	SYS_EACCESS                = 376 // int eaccess(_In_z_ const char *path,int amode);
	SYS_NMOUNT                 = 378 // int nmount(_In_reads_(iovcnt) _Contains_long_ptr_ struct iovec *iovp,unsigned int iovcnt,int flags);
	SYS___MAC_GET_PROC         = 384 // int __mac_get_proc(_In_ _Contains_long_ptr_ struct mac *mac_p);
	SYS___MAC_SET_PROC         = 385 // int __mac_set_proc(_In_ _Contains_long_ptr_ struct mac *mac_p);
	SYS___MAC_GET_FD           = 386 // int __mac_get_fd(int fd,_In_ _Contains_long_ptr_ struct mac *mac_p);
	SYS___MAC_GET_FILE         = 387 // int __mac_get_file(_In_z_ const char *path_p,_In_ _Contains_long_ptr_ struct mac *mac_p);
	SYS___MAC_SET_FD           = 388 // int __mac_set_fd(int fd,_In_ _Contains_long_ptr_ struct mac *mac_p);
	SYS___MAC_SET_FILE         = 389 // int __mac_set_file(_In_z_ const char *path_p,_In_ _Contains_long_ptr_ struct mac *mac_p);
	SYS_KENV                   = 390 // int kenv(int what,_In_z_opt_ const char *name,_Inout_updates_opt_(len) char *value,int len);
	SYS_LCHFLAGS               = 391 // int lchflags(_In_z_ const char *path,u_long flags);
	SYS_UUIDGEN                = 392 // int uuidgen(_Out_writes_(count) struct uuid *store,int count);
	SYS_SENDFILE               = 393 // int sendfile(int fd,int s,off_t offset,size_t nbytes,_In_opt_ _Contains_ptr_ struct sf_hdtr *hdtr,_Out_opt_ off_t *sbytes,int flags);
	SYS_MAC_SYSCALL            = 394 // int mac_syscall(_In_z_ const char *policy,int call,_In_opt_ void *arg);
	SYS___MAC_GET_PID          = 409 // int __mac_get_pid(pid_t pid,_In_ _Contains_long_ptr_ struct mac *mac_p);
	SYS___MAC_GET_LINK         = 410 // int __mac_get_link(_In_z_ const char *path_p,_In_ _Contains_long_ptr_ struct mac *mac_p);
	SYS___MAC_SET_LINK         = 411 // int __mac_set_link(_In_z_ const char *path_p,_In_ _Contains_long_ptr_ struct mac *mac_p);
	SYS_EXTATTR_SET_LINK       = 412 // ssize_t extattr_set_link(_In_z_ const char *path,int attrnamespace,_In_z_ const char *attrname,_In_reads_bytes_(nbytes) void *data,size_t nbytes);
	SYS_EXTATTR_GET_LINK       = 413 // ssize_t extattr_get_link(_In_z_ const char *path,int attrnamespace,_In_z_ const char *attrname,_Out_writes_bytes_(nbytes) void *data,size_t nbytes);
	SYS_EXTATTR_DELETE_LINK    = 414 // int extattr_delete_link(_In_z_ const char *path,int attrnamespace,_In_z_ const char *attrname);
	SYS___MAC_EXECVE           = 415 // int __mac_execve(_In_z_ const char *fname,_In_ char **argv,_In_ char **envv,_In_ _Contains_long_ptr_ struct mac *mac_p);
	SYS_SIGACTION              = 416 // int sigaction(int sig,_In_opt_ _Contains_ptr_ const struct sigaction *act,_Out_opt_ _Contains_ptr_ struct sigaction *oact);
	SYS_SIGRETURN              = 417 // int sigreturn(_In_ _Contains_long_ptr_ const struct __ucontext *sigcntxp);
	SYS_GETCONTEXT             = 421 // int getcontext(_Out_ _Contains_long_ptr_ struct __ucontext *ucp);
	SYS_SETCONTEXT             = 422 // int setcontext(_In_ _Contains_long_ptr_ const struct __ucontext *ucp);
	SYS_SWAPCONTEXT            = 423 // int swapcontext(_Out_ _Contains_long_ptr_ struct __ucontext *oucp,_In_ _Contains_long_ptr_ const struct __ucontext *ucp);
	SYS_SWAPOFF                = 424 // int swapoff(_In_z_ const char *name);
	SYS___ACL_GET_LINK         = 425 // int __acl_get_link(_In_z_ const char *path,acl_type_t type,_Out_ struct acl *aclp);
	SYS___ACL_SET_LINK         = 426 // int __acl_set_link(_In_z_ const char *path,acl_type_t type,_In_ struct acl *aclp);
	SYS___ACL_DELETE_LINK      = 427 // int __acl_delete_link(_In_z_ const char *path,acl_type_t type);
	SYS___ACL_ACLCHECK_LINK    = 428 // int __acl_aclcheck_link(_In_z_ const char *path,acl_type_t type,_In_ struct acl *aclp);
	SYS_SIGWAIT                = 429 // int sigwait(_In_ const sigset_t *set,_Out_ int *sig);
	SYS_THR_CREATE             = 430 // int thr_create(_In_ _Contains_long_ptr_ struct __ucontext *ctx,_Out_ long *id,int flags);
	SYS_THR_EXIT               = 431 // void thr_exit(_Out_opt_ long *state);
	SYS_THR_SELF               = 432 // int thr_self(_Out_ long *id);
	SYS_THR_KILL               = 433 // int thr_kill(long id,int sig);
	SYS_JAIL_ATTACH            = 436 // int jail_attach(int jid);
	SYS_EXTATTR_LIST_FD        = 437 // ssize_t extattr_list_fd(int fd,int attrnamespace,_Out_writes_bytes_opt_(nbytes) void *data,size_t nbytes);
	SYS_EXTATTR_LIST_FILE      = 438 // ssize_t extattr_list_file(_In_z_ const char *path,int attrnamespace,_Out_writes_bytes_opt_(nbytes) void *data,size_t nbytes);
	SYS_EXTATTR_LIST_LINK      = 439 // ssize_t extattr_list_link(_In_z_ const char *path,int attrnamespace,_Out_writes_bytes_opt_(nbytes) void *data,size_t nbytes);
	SYS_THR_SUSPEND            = 442 // int thr_suspend(_In_opt_ _Contains_long_timet_ const struct timespec *timeout);
	SYS_THR_WAKE               = 443 // int thr_wake(long id);
	SYS_KLDUNLOADF             = 444 // int kldunloadf(int fileid,int flags);
	SYS_AUDIT                  = 445 // int audit(_In_reads_bytes_(length) const void *record,u_int length);
	SYS_AUDITON                = 446 // int auditon(int cmd,_In_opt_ void *data,u_int length);
	SYS_GETAUID                = 447 // int getauid(_Out_ uid_t *auid);
	SYS_SETAUID                = 448 // int setauid(_In_ uid_t *auid);
	SYS_GETAUDIT               = 449 // int getaudit(_Out_ struct auditinfo *auditinfo);
	SYS_SETAUDIT               = 450 // int setaudit(_In_ struct auditinfo *auditinfo);
	SYS_GETAUDIT_ADDR          = 451 // int getaudit_addr(_Out_writes_bytes_(length) struct auditinfo_addr *auditinfo_addr,u_int length);
	SYS_SETAUDIT_ADDR          = 452 // int setaudit_addr(_In_reads_bytes_(length) struct auditinfo_addr *auditinfo_addr,u_int length);
	SYS_AUDITCTL               = 453 // int auditctl(_In_z_ const char *path);
	SYS__UMTX_OP               = 454 // int _umtx_op(_Inout_ void *obj,int op,u_long val,_In_ void *uaddr1,_In_ void *uaddr2);
	SYS_THR_NEW                = 455 // int thr_new(_In_ _Contains_long_ptr_ struct thr_param *param,int param_size);
	SYS_SIGQUEUE               = 456 // int sigqueue(pid_t pid,int signum,_In_ void *value);
	SYS_ABORT2                 = 463 // void abort2(_In_z_ const char *why,int nargs,_In_reads_(nargs) void **args);
	SYS_THR_SET_NAME           = 464 // int thr_set_name(long id,_In_z_ const char *name);
	SYS_AIO_FSYNC              = 465 // int aio_fsync(int op,_In_ _Contains_long_ptr_ struct aiocb *aiocbp);
	SYS_RTPRIO_THREAD          = 466 // int rtprio_thread(int function,lwpid_t lwpid,_Inout_ struct rtprio *rtp);
	SYS_PREAD                  = 475 // ssize_t pread(int fd,_Out_writes_bytes_(nbyte) void *buf,size_t nbyte,off_t offset);
	SYS_PWRITE                 = 476 // ssize_t pwrite(int fd,_In_reads_bytes_(nbyte) const void *buf,size_t nbyte,off_t offset);
	SYS_MMAP                   = 477 // void *mmap(_In_ void *addr,size_t len,int prot,int flags,int fd,off_t pos);
	SYS_LSEEK                  = 478 // off_t lseek(int fd,off_t offset,int whence);
	SYS_TRUNCATE               = 479 // int truncate(_In_z_ const char *path,off_t length);
	SYS_FTRUNCATE              = 480 // int ftruncate(int fd,off_t length);
	SYS_THR_KILL2              = 481 // int thr_kill2(pid_t pid,long id,int sig);
	SYS_SHM_UNLINK             = 483 // int shm_unlink(_In_z_ const char *path);
	SYS_CPUSET                 = 484 // int cpuset(_Out_ cpusetid_t *setid);
	SYS_CPUSET_SETID           = 485 // int cpuset_setid(cpuwhich_t which,id_t id,cpusetid_t setid);
	SYS_CPUSET_GETID           = 486 // int cpuset_getid(cpulevel_t level,cpuwhich_t which,id_t id,_Out_ cpusetid_t *setid);
	SYS_CPUSET_GETAFFINITY     = 487 // int cpuset_getaffinity(cpulevel_t level,cpuwhich_t which,id_t id,size_t cpusetsize,_Out_ cpuset_t *mask);
	SYS_CPUSET_SETAFFINITY     = 488 // int cpuset_setaffinity(cpulevel_t level,cpuwhich_t which,id_t id,size_t cpusetsize,_Out_ const cpuset_t *mask);
	SYS_FACCESSAT              = 489 // int faccessat(int fd,_In_z_ const char *path,int amode,int flag);
	SYS_FCHMODAT               = 490 // int fchmodat(int fd,_In_z_ const char *path,mode_t mode,int flag);
	SYS_FCHOWNAT               = 491 // int fchownat(int fd,_In_z_ const char *path,uid_t uid,gid_t gid,int flag);
	SYS_FEXECVE                = 492 // int fexecve(int fd,_In_ char **argv,_In_ char **envv);
	SYS_FUTIMESAT              = 494 // int futimesat(int fd,_In_z_ const char *path,_In_reads_(2) _Contains_long_timet_ const struct timeval *times);
	SYS_LINKAT                 = 495 // int linkat(int fd1,_In_z_ const char *path1,int fd2,_In_z_ const char *path2,int flag);
	SYS_MKDIRAT                = 496 // int mkdirat(int fd,_In_z_ const char *path,mode_t mode);
	SYS_MKFIFOAT               = 497 // int mkfifoat(int fd,_In_z_ const char *path,mode_t mode);
	SYS_OPENAT                 = 499 // int openat(int fd,_In_z_ const char *path,int flag,mode_t mode);
	SYS_READLINKAT             = 500 // ssize_t readlinkat(int fd,_In_z_ const char *path,_Out_writes_bytes_(bufsize) char *buf,size_t bufsize);
	SYS_RENAMEAT               = 501 // int renameat(int oldfd,_In_z_ const char *old,int newfd,_In_z_ const char *new);
	SYS_SYMLINKAT              = 502 // int symlinkat(_In_z_ const char *path1,int fd,_In_z_ const char *path2);
	SYS_UNLINKAT               = 503 // int unlinkat(int fd,_In_z_ const char *path,int flag);
	SYS_POSIX_OPENPT           = 504 // int posix_openpt(int flags);
	SYS_JAIL_GET               = 506 // int jail_get(_In_reads_(iovcnt) _Contains_long_ptr_ struct iovec *iovp,unsigned int iovcnt,int flags);
	SYS_JAIL_SET               = 507 // int jail_set(_In_reads_(iovcnt) _Contains_long_ptr_ struct iovec *iovp,unsigned int iovcnt,int flags);
	SYS_JAIL_REMOVE            = 508 // int jail_remove(int jid);
	SYS_LPATHCONF              = 513 // int lpathconf(_In_z_ const char *path,int name);
	SYS___CAP_RIGHTS_GET       = 515 // int __cap_rights_get(int version,int fd,_Out_ cap_rights_t *rightsp);
	SYS_CAP_ENTER              = 516 // int cap_enter(void);
	SYS_CAP_GETMODE            = 517 // int cap_getmode(_Out_ u_int *modep);
	SYS_PDFORK                 = 518 // int pdfork(_Out_ int *fdp,int flags);
	SYS_PDKILL                 = 519 // int pdkill(int fd,int signum);
	SYS_PDGETPID               = 520 // int pdgetpid(int fd,_Out_ pid_t *pidp);
	SYS_PSELECT                = 522 // int pselect(int nd,_Inout_opt_ fd_set *in,_Inout_opt_ fd_set *ou,_Inout_opt_ fd_set *ex,_In_opt_ _Contains_long_timet_ const struct timespec *ts,_In_opt_ const sigset_t *sm);
	SYS_GETLOGINCLASS          = 523 // int getloginclass(_Out_writes_z_(namelen) char *namebuf,size_t namelen);
	SYS_SETLOGINCLASS          = 524 // int setloginclass(_In_z_ const char *namebuf);
	SYS_RCTL_GET_RACCT         = 525 // int rctl_get_racct(_In_reads_bytes_(inbuflen) const void *inbufp,size_t inbuflen,_Out_writes_bytes_(outbuflen) void *outbufp,size_t outbuflen);
	SYS_RCTL_GET_RULES         = 526 // int rctl_get_rules(_In_reads_bytes_(inbuflen) const void *inbufp,size_t inbuflen,_Out_writes_bytes_(outbuflen) void *outbufp,size_t outbuflen);
	SYS_RCTL_GET_LIMITS        = 527 // int rctl_get_limits(_In_reads_bytes_(inbuflen) const void *inbufp,size_t inbuflen,_Out_writes_bytes_(outbuflen) void *outbufp,size_t outbuflen);
	SYS_RCTL_ADD_RULE          = 528 // int rctl_add_rule(_In_reads_bytes_(inbuflen) const void *inbufp,size_t inbuflen,_Out_writes_bytes_(outbuflen) void *outbufp,size_t outbuflen);
	SYS_RCTL_REMOVE_RULE       = 529 // int rctl_remove_rule(_In_reads_bytes_(inbuflen) const void *inbufp,size_t inbuflen,_Out_writes_bytes_(outbuflen) void *outbufp,size_t outbuflen);
	SYS_POSIX_FALLOCATE        = 530 // int posix_fallocate(int fd,off_t offset,off_t len);
	SYS_POSIX_FADVISE          = 531 // int posix_fadvise(int fd,off_t offset,off_t len,int advice);
	SYS_WAIT6                  = 532 // int wait6(idtype_t idtype,id_t id,_Out_opt_ int *status,int options,_Out_opt_ _Contains_long_ struct __wrusage *wrusage,_Out_opt_ _Contains_long_ptr_ struct siginfo *info);
	SYS_CAP_RIGHTS_LIMIT       = 533 // int cap_rights_limit(int fd,_In_ cap_rights_t *rightsp);
	SYS_CAP_IOCTLS_LIMIT       = 534 // int cap_ioctls_limit(int fd,_In_reads_(ncmds) const u_long *cmds,size_t ncmds);
	SYS_CAP_IOCTLS_GET         = 535 // ssize_t cap_ioctls_get(int fd,_Out_writes_(maxcmds) u_long *cmds,size_t maxcmds);
	SYS_CAP_FCNTLS_LIMIT       = 536 // int cap_fcntls_limit(int fd,uint32_t fcntlrights);
	SYS_CAP_FCNTLS_GET         = 537 // int cap_fcntls_get(int fd,_Out_ uint32_t *fcntlrightsp);
	SYS_BINDAT                 = 538 // int bindat(int fd,int s,_In_reads_bytes_(namelen) const struct sockaddr *name,__socklen_t namelen);
	SYS_CONNECTAT              = 539 // int connectat(int fd,int s,_In_reads_bytes_(namelen) const struct sockaddr *name,__socklen_t namelen);
	SYS_CHFLAGSAT              = 540 // int chflagsat(int fd,_In_z_ const char *path,u_long flags,int atflag);
	SYS_ACCEPT4                = 541 // int accept4(int s,_Out_writes_bytes_opt_(*anamelen) struct sockaddr *name,_Inout_opt_ __socklen_t *anamelen,int flags);
	SYS_PIPE2                  = 542 // int pipe2(_Out_writes_(2) int *fildes,int flags);
	SYS_AIO_MLOCK              = 543 // int aio_mlock(_In_ _Contains_long_ptr_ struct aiocb *aiocbp);
	SYS_PROCCTL                = 544 // int procctl(idtype_t idtype,id_t id,int com,_In_opt_ void *data);
	SYS_PPOLL                  = 545 // int ppoll(_Inout_updates_(nfds) struct pollfd *fds,u_int nfds,_In_opt_ _Contains_long_timet_ const struct timespec *ts,_In_opt_ const sigset_t *set);
	SYS_FUTIMENS               = 546 // int futimens(int fd,_In_reads_(2) _Contains_long_timet_ const struct timespec *times);
	SYS_UTIMENSAT              = 547 // int utimensat(int fd,_In_z_ const char *path,_In_reads_(2) _Contains_long_timet_ const struct timespec *times,int flag);
	SYS_FDATASYNC              = 550 // int fdatasync(int fd);
	SYS_FSTAT                  = 551 // int fstat(int fd,_Out_ _Contains_long_timet_ struct stat *sb);
	SYS_FSTATAT                = 552 // int fstatat(int fd,_In_z_ const char *path,_Out_ _Contains_long_timet_ struct stat *buf,int flag);
	SYS_FHSTAT                 = 553 // int fhstat(_In_ const struct fhandle *u_fhp,_Out_ _Contains_long_timet_ struct stat *sb);
	SYS_GETDIRENTRIES          = 554 // ssize_t getdirentries(int fd,_Out_writes_bytes_(count) char *buf,size_t count,_Out_ off_t *basep);
	SYS_STATFS                 = 555 // int statfs(_In_z_ const char *path,_Out_ struct statfs *buf);
	SYS_FSTATFS                = 556 // int fstatfs(int fd,_Out_ struct statfs *buf);
	SYS_GETFSSTAT              = 557 // int getfsstat(_Out_writes_bytes_opt_(bufsize) struct statfs *buf,long bufsize,int mode);
	SYS_FHSTATFS               = 558 // int fhstatfs(_In_ const struct fhandle *u_fhp,_Out_ struct statfs *buf);
	SYS_MKNODAT                = 559 // int mknodat(int fd,_In_z_ const char *path,mode_t mode,dev_t dev);
	SYS_KEVENT                 = 560 // int kevent(int fd,_In_reads_opt_(nchanges) _Contains_ptr_ const struct kevent *changelist,int nchanges,_Out_writes_opt_(nevents) _Contains_ptr_ struct kevent *eventlist,int nevents,_In_opt_ _Contains_long_timet_ const struct timespec *timeout);
	SYS_CPUSET_GETDOMAIN       = 561 // int cpuset_getdomain(cpulevel_t level,cpuwhich_t which,id_t id,size_t domainsetsize,_Out_writes_bytes_(domainsetsize) domainset_t *mask,_Out_ int *policy);
	SYS_CPUSET_SETDOMAIN       = 562 // int cpuset_setdomain(cpulevel_t level,cpuwhich_t which,id_t id,size_t domainsetsize,_In_reads_bytes_(domainsetsize) domainset_t *mask,int policy);
	SYS_GETRANDOM              = 563 // int getrandom(_Out_writes_bytes_(buflen) void *buf,size_t buflen,unsigned int flags);
	SYS_GETFHAT                = 564 // int getfhat(int fd,_In_z_ char *path,_Out_ struct fhandle *fhp,int flags);
	SYS_FHLINK                 = 565 // int fhlink(_In_ struct fhandle *fhp,_In_z_ const char *to);
	SYS_FHLINKAT               = 566 // int fhlinkat(_In_ struct fhandle *fhp,int tofd,_In_z_ const char *to,);
	SYS_FHREADLINK             = 567 // int fhreadlink(_In_ struct fhandle *fhp,_Out_writes_(bufsize) char *buf,size_t bufsize);
	SYS_FUNLINKAT              = 568 // int funlinkat(int dfd,_In_z_ const char *path,int fd,int flag);
	SYS_COPY_FILE_RANGE        = 569 // ssize_t copy_file_range(int infd,_Inout_opt_ off_t *inoffp,int outfd,_Inout_opt_ off_t *outoffp,size_t len,unsigned int flags);
	SYS___SYSCTLBYNAME         = 570 // int __sysctlbyname(_In_reads_(namelen) const char *name,size_t namelen,_Out_writes_bytes_opt_(*oldlenp) void *old,_Inout_opt_ size_t *oldlenp,_In_reads_bytes_opt_(newlen) void *new,size_t newlen);
	SYS_SHM_OPEN2              = 571 // int shm_open2(_In_z_ const char *path,int flags,mode_t mode,int shmflags,_In_z_ const char *name);
	SYS_SHM_RENAME             = 572 // int shm_rename(_In_z_ const char *path_from,_In_z_ const char *path_to,int flags);
	SYS_SIGFASTBLOCK           = 573 // int sigfastblock(int cmd,_Inout_opt_ uint32_t *ptr);
	SYS___REALPATHAT           = 574 // int __realpathat(int fd,_In_z_ const char *path,_Out_writes_z_(size) char *buf,size_t size,int flags);
	SYS_CLOSE_RANGE            = 575 // int close_range(u_int lowfd,u_int highfd,int flags);
	SYS___SPECIALFD            = 577 // int __specialfd(int type,_In_reads_bytes_(len) const void *req,size_t len);
	SYS_AIO_WRITEV             = 578 // int aio_writev(_Inout_ struct aiocb *aiocbp);
	SYS_AIO_READV              = 579 // int aio_readv(_Inout_ struct aiocb *aiocbp);
)
